#!/usr/bin/env php

<?php

require __DIR__ . '/../vendor/autoload.php';

use Nette\Utils\Paginator;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Helper\Table;

class QueryCommand extends Command
{
    private string $historyFile = __DIR__ . '/../.fiquela_history';

    /** @var ArgvInput $input */
    private static InputInterface $input;

    /** @var ConsoleOutput $output */
    private static OutputInterface $output;

    protected function configure(): void
    {
        $this->setName('fiquela-cli')
            ->setDescription('Execute an SQL-like query on a structured data file')
            ->addArgument('query', InputArgument::OPTIONAL, 'SQL-like query (if omitted, enter interactive mode)')
            ->addOption('preview', 'p', InputOption::VALUE_NONE, 'Show content of the file')
            ->addOption('url', 'u', InputOption::VALUE_OPTIONAL, 'Download and open file from URL')
            ->addOption('file', 'f', InputOption::VALUE_OPTIONAL, 'Path to the data file')
            ->addOption('file-type', 't', InputOption::VALUE_OPTIONAL, 'Choose a type of file (csv, xml, json, yaml, neon)')
            ->addOption('file-delimiter', 'd', InputOption::VALUE_OPTIONAL, 'Set the delimiter for file', ',')
            ->addOption('file-encoding', 'e', InputOption::VALUE_OPTIONAL, 'Set the encoding for file', 'utf-8')
            ->addOption('memory-limit', 'm', InputOption::VALUE_OPTIONAL, 'Set memory limit (e.g. 128M)', '128M');
    }

    protected function interact(InputInterface $input, OutputInterface $output): void
    {
        $memoryLimit = $input->getOption('memory-limit');
        ini_set('memory_limit', $memoryLimit);

        $downloadSection = $output->section();
        if ($input->getOption('url')) {
            $filePath = $this->downloadFile($input->getOption('url'), $input, $downloadSection);

            if (!$filePath) {
                throw new RuntimeException("Could not download the file.");
            }

            sleep(1);
            $downloadSection->clear();
            $downloadSection->writeln("<info>File has been downloaded to:</info> $filePath");
            $downloadSection->writeln('');

            $input->setOption('file', $filePath);
        }

        $file = $input->getOption('file') ?? '';
        if ($file !== '' && file_exists($file) === false) {
            throw new RuntimeException("File not found: $file");
        }

        if ($input->getOption('preview')) {
            $input->setArgument('query', 'select *;');
            $input->setOption('file-type', 'csv');
            $input->setOption('file-delimiter', '~');
        }
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        self::$input = $input;
        self::$output = $output;

        $query = self::$input->getArgument('query') ?? '';
        $file = self::$input->getOption('file') ?? '';

        if ($file !== '' && $query !== '') {
            return $this->runQuery($query, $file);
        } elseif ($query !== '') {
            return $this->runQuery($query);
        }

        return $this->interactiveMode($file === '' ? null : $file);
    }

    private function runQuery(string $query, ?string $file = null): int
    {
        $queries = array_filter(array_map('trim', explode(';', $query)));
        foreach ($queries as $key => $query) {
            try {
                // Render result
                $this->renderResult(
                    $this->provideQuery($query, $file),
                    count($queries) > 1 ? ($key + 1) : null
                );
            } catch (Exception $e) {
                self::$output->writeln("<error>Error: " . $e->getMessage() . "</error>");
                continue;
            }
        }

        return Command::SUCCESS;
    }

    /**
     * @throws FQL\Exception\FileNotFoundException
     * @throws FQL\Exception\InvalidFormatException
     */
    private function provideQuery(string $query, ?string $file = null): FQL\Interface\Query
    {
        if ($file !== null) {
            $stream = FQL\Stream\Provider::fromFile(
                $file,
                FQL\Enum\Format::tryFrom(self::$input->getOption('file-type') ?? '')
            );

            if ($stream instanceof FQL\Stream\Csv) {
                $stream->setDelimiter(self::$input->getOption('file-delimiter'));
                $stream->setInputEncoding(self::$input->getOption('file-encoding'));
            } elseif ($stream instanceof FQL\Stream\Xml) {
                $stream->setInputEncoding(self::$input->getOption('file-encoding'));
            }

            return (new FQL\Sql\Sql(trim($query)))
                ->parseWithQuery($stream->query());
        }

        return FQL\Query\Provider::fql($query);
    }

    private function interactiveMode(?string $file = null): int
    {
        if (!$this->printInteractiveModeWelcomeMessage($file)) {
            return Command::FAILURE;
        }

        if (function_exists('readline_read_history') && file_exists($this->historyFile)) {
            readline_read_history($this->historyFile);
        }

        $queryBuffer = "";
        while (true) {
            $prompt = empty($queryBuffer)
                ? 'fql> '
                : '  -> ';
            $line = readline($prompt);

            if ($line === false || strtolower(trim($line)) === 'exit') {
                break;
            } elseif (strtolower(trim($line)) === 'info') {
                $this->printInteractiveModeWelcomeMessage($file);
                continue;
            }

            $queryBuffer .= " " . trim($line);

            // When the last character is a semicolon, execute the query
            if (str_ends_with(trim($queryBuffer), ";")) {
                $queryBuffer = trim($queryBuffer, " ;"); // Remove semicolon
                $this->saveHistory($queryBuffer);
                $this->runQuery($queryBuffer, $file);
                $queryBuffer = ""; // Clear buffer
            }
        }

        return Command::SUCCESS;
    }

    private function saveHistory(string $query): void
    {
        if (!function_exists('readline_add_history')) {
            return;
        }

        $history = array_map(
            [$this, 'decodeReadlineHistory'],
            file_exists($this->historyFile)
                ? file($this->historyFile, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES)
                : []
        );

        $lastQuery = end($history);
        unset($history);

        if ($this->decodeReadlineHistory($lastQuery) !== $query) {
            readline_add_history($query);
            readline_write_history($this->historyFile);
            $this->truncateHistory(50);
        }
    }

    private function decodeReadlineHistory(string $escapedString): string
    {
        return preg_replace_callback('/\\\\([0-7]{1,3})/', function ($matches) {
            return chr(octdec($matches[1]));
        }, $escapedString);
    }

    private function truncateHistory(int $limit): void
    {
        if (!file_exists($this->historyFile)) {
            return;
        }

        // Load history and remove older records
        $history = file($this->historyFile, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);

        if (empty($history)) {
            return;
        }

       // First line is always preserved, we only limit SQL commands
        $header = array_shift($history); // remove first line (_HiStOrY_V2_)

        if (count($history) > $limit) {
            $history = array_slice($history, -$limit); // Keep only the last $limit commands
        }

        // Join `_HiStOrY_V2_` + limited commands and write back
        file_put_contents($this->historyFile, $header . "\n" . implode("\n", $history) . "\n");
    }

    private function printInteractiveModeWelcomeMessage(?string $file): bool
    {
        $section = self::$output->section();
        $section->writeln("Welcome to FiQueLa interactive mode. Commands end with ;.");
        $section->writeln("");
        $section->writeln(sprintf("<info>Memory limit: %s</info>", ini_get('memory_limit')));
        if ($file !== null) {
            if (!file_exists($file)) {
                $section->writeln("<error>File not found: $file</error>");
                return false;
            }

            $section->writeln(sprintf("<info>File: %s</info>", $file));
            $section->writeln(sprintf("<info>File size: %s</info>", $this->humanFilesize(filesize($file))));
            $section->writeln(sprintf("<info>File encoding: %s</info>", self::$input->getOption('file-encoding')));
            $section->writeln(sprintf("<info>File delimiter: %s</info>", self::$input->getOption('file-delimiter')));
        }

        $section->writeln('');
        $section->writeln("Type 'exit' or 'Ctrl-c' to quit.");
        return true;
    }

    private function renderResult(FQL\Interface\Query $query, ?int $counter = null): void
    {
        $section = self::$output->section();
        if ($counter !== null) {
            $section->writeln('');
            $section->writeln(sprintf("<info>Query #%d:</info>", $counter));
        }

        if (!self::$input->getOption('preview')) {
            $section->writeln('');
            $section->writeln(FQL\Query\Debugger::highlightSQL((string) $query));
            $section->writeln('');
        }

        $tableSection = self::$output->section();
        $tableSection->writeln('Loading...');

        $results = $query->execute();
        $exists = $results->exists();
        if (!$exists) {
            $tableSection->clear();
            $section->clear();
            $tableSection->writeln("<comment>No results found.</comment>");
            return;
        }

        $headers = array_keys($results->fetch());

        $paginator = new Paginator;
        $paginator->setItemCount($results->count());
        $paginator->setPage(1);
        $paginator->setItemsPerPage(self::$input->getOption('preview') ? 35 : 25);

        $ctrlFind = '';

        while (true) {
            $tableSection->clear();
            usleep(50000);
            $tableSection->writeln('Loading...');

            if ($paginator->getPageCount() > 1) {
                $query->page($paginator->getPage(), $paginator->getItemsPerPage());
            }

            $timerStart = microtime(true);
            $rows = $this->getRows($query);
            $timerEnd = microtime(true);

            $tableSection->clear();
            $table = new Table($tableSection);
            $table->setHeaders($headers)
                ->setRows($rows)
                ->setHeaderTitle(
                    sprintf('Page %d/%d', $paginator->getPage(), $paginator->getPageCount())
                )->setFooterTitle(
                    sprintf(
                        'Showing %d-%d from %d rows',
                        $paginator->getOffset() + 1,
                        $paginator->getLastItemOnPage(),
                        $paginator->getItemCount()
                    )
                )->render();

            if ($ctrlFind !== '') {
                $this->highlightTextInSection($tableSection, $ctrlFind);
            }

            $tableSection->writeln(
                sprintf(
                    '<info>%s sec, memory %s, memory (peak) %s</info>',
                    number_format($timerEnd - $timerStart, 4),
                    FQL\Query\Debugger::memoryUsage(),
                    FQL\Query\Debugger::memoryPeakUsage()
                )
            );

            if ($paginator->getPageCount() <= 1) {
                break;
            }

            $help = 'Press [Enter] or [:n] for next page, [:b] for previous, [:l] for last, [:f] for first, ';
            $help .= '[/text] for search text in page [:e] for export results to file, [:q] to quit' . PHP_EOL;
            $input = readline($help);
            $tableSection->addNewLineOfInputSubmit();
            $tableSection->addNewLineOfInputSubmit();

            switch ($input) {
                case ':e':
                    $this->exportToFile($query, $tableSection, $paginator);
                    break 2;
                case ':q':
                    $tableSection->clear(2);
                    usleep(50000);
                    break 2 ;
                case ':l':
                    $paginator->setPage($paginator->getLastPage());
                    break;
                case ':f':
                    $paginator->setPage($paginator->getFirstPage());
                    break;
                case ':b':
                    if ($paginator->getPage() - 1 < 1) {
                        $paginator->setPage($paginator->getLastPage());
                    } else {
                        $paginator->setPage($paginator->getPage() - 1);
                    }
                    break;
                case ':n':
                case '':
                    if ($paginator->getPage() + 1 > $paginator->getPageCount()) {
                        $paginator->setPage($paginator->getFirstPage());
                    } else {
                        $paginator->setPage($paginator->getPage() + 1);
                    }
                    break;
                default:
                    if (str_starts_with($input, '/')) {
                        $ctrlFind = trim(substr($input, 1));
                    } elseif (is_numeric($input)) {
                        $input = (int) $input;
                        if ($input > $paginator->getPageCount()) {
                            $paginator->setPage($paginator->getLastPage());
                        } elseif ($input > 0) {
                            $paginator->setPage($input);
                        } else {
                            $paginator->setPage($paginator->getFirstPage());
                        }
                    }
            }
        }

        usleep(50000);
        $section->clear();
        $section->clear(2);
        usleep(50000);
    }

    private function humanFilesize($bytes, int $decimals = 2): string
    {
        $units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB'];
        $factor = $bytes > 0 ? floor(log($bytes, 1024)) : 0;
        return round($bytes / (1024 ** $factor), $decimals) . ' ' . $units[$factor];
    }

    /**
     * @return array<int, string>
     * @throws Exception
     */
    private function getRows(FQL\Interface\Query $query): array
    {
        // Convert associative results to indexed arrays
        return array_map(function (array $data) {
            $values = array_values($data);
            return array_map(function ($value) {
                if (is_array($value)) {
                    $value = json_encode($value, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES);
                } else {
                    $value = $value ?? 'null';
                }

                $limit = self::$input->getOption('preview') ? 195 : 50;
                if (mb_strlen($value) <= $limit) {
                    return $value;
                }

                return mb_substr($value, 0, $limit) . '...';
            }, $values);
        }, iterator_to_array($query->execute()->getIterator()));
    }

    private function exportToFile(
        FQL\Interface\Query $query,
        Symfony\Component\Console\Output\ConsoleSectionOutput $tableSection,
        Paginator $paginator
    ): void {
        $questionHelper = $this->getHelper('question');
        $tableSection->writeln('Exporting data to json...');
        $questionExportType = new Symfony\Component\Console\Question\ChoiceQuestion(
            'Choose format of export',
            ['json' => 'JSON', 'csv' => 'CSV'],
        );
        $exportFormat = $questionHelper->ask(self::$input, $tableSection, $questionExportType);

        $question = new Symfony\Component\Console\Question\Question('Change a file name or leave empty: ');
        $tmpFile = tempnam(sys_get_temp_dir(), 'fiquela-cli-');
        $file = $questionHelper->ask(self::$input, $tableSection, $question) ?? $tmpFile;

        switch ($exportFormat) {
            case 'json':
                $this->exportToJson($query, $file, $paginator);
                break;
            case 'csv':
                $this->exportToCsv($query, $file, $paginator);
                break;
        }

        $tableSection->writeln(sprintf('<info>Results saved to %s</info>', $file));
    }

    private function highlightTextInSection(Symfony\Component\Console\Output\ConsoleSectionOutput $section, string $searchTerm): void
    {
        $content = $section->getContent();
        $content = str_replace($searchTerm, "<options=bold,underscore;fg=yellow>{$searchTerm}</>", $content);
        $section->overwrite($content);
    }

    private function downloadFile(string $url, InputInterface $input, OutputInterface $output): ?string
    {
        $currentDir = getcwd();
        if (!is_writable($currentDir)) {
            throw new RuntimeException("Error: Current directory is not writable.");
        }

        $fileName = basename(parse_url($url, PHP_URL_PATH));
        $filePath = $currentDir . DIRECTORY_SEPARATOR . $fileName;

        if (file_exists($filePath)) {
            return $filePath;
        }

        $tempFile = $filePath;
        try {
            $progressBar = new Symfony\Component\Console\Helper\ProgressBar($output);
            $progressBar->setFormat(' %message% [%bar%] %percent:3s%% (%memory:6s%)');
            $progressBar->setMessage(sprintf('Downloading %s...', $url));
            $progressBar->start();

            $client = new GuzzleHttp\Client();
            $resource = fopen($tempFile, 'w');
            $response = $client->request('GET', $url, [
                'sink' => $resource,
                'progress' => function ($downloadSize, $downloaded, $uploadSize, $uploaded) use ($progressBar) {
                    if ($downloadSize > 0) {
                        $progress = $downloaded / $downloadSize;
                        $progressBar->setProgress((int) ($progress * 100));
                    }
                }
            ]);

            fclose($resource);
            $progressBar->finish();
            $output->writeln('');
            $output->writeln('Finished!');
            $output->writeln('');

            if ($response->getStatusCode() !== 200) {
                unlink($tempFile);
                return null;
            }

            return $tempFile;
        } catch (\Exception $e) {
            $output->writeln("<error>Error downloading file: " . $e->getMessage() . "</error>");
            unlink($tempFile);
            return null;
        }
    }

    private function exportToJson(
        FQL\Interface\Query $query,
        string $file,
        Paginator $paginator
    ) {
        file_put_contents(
            $file,
            json_encode(
                iterator_to_array($query->limit($paginator->getItemCount(), 0)->execute()->getIterator()),
                JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES
            )
        );
    }

    private function exportToCsv(
        FQL\Interface\Query $query,
        string $file,
        Paginator $paginator
    ) {
        $csvFile = fopen($file, 'w');
        $results = $query->limit($paginator->getItemCount(), 0)->execute();
        $headers = array_keys($results->fetch());
        fputcsv($csvFile, $headers);
        foreach ($query->limit($paginator->getItemCount(), 0)->execute()->getIterator() as $row) {
            fputcsv($csvFile, $row);
        }
        fclose($csvFile);
    }

}

$application = new Application();
$application->add(new QueryCommand());
$application->setDefaultCommand('fiquela-cli', true);
$application->run();
